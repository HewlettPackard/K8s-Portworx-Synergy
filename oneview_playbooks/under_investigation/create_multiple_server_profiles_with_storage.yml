###
# (C) Copyright (2012-2017) Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
###
---
- hosts: localhost
  connection: local
  vars:
    config: '{{ playbook_dir }}/oneview_config.json'
    management_network: "Mgmt"
    profile_numbers: 3 
    os_deployment_plan_name: "RHEL-7.3-Kubernetes-Worker-2017-10-10"
    deployment_network_name: "Deploy"
    cluster_ip: "{{ lookup('ini', 'CLUSTER_IP section=cluster_data file=/root/hpe-synergy-portworx-kubernetes/kubernetes_portworx/data/cluster_data.ini') }}"
    cluster_join_token: "{{ lookup('ini', 'CLUSTER_TOKEN section=cluster_data file=/root/hpe-synergy-portworx-kubernetes/kubernetes_portworx/data/cluster_data.ini') }}"
    cluster_port: "{{ lookup('ini', 'CLUSTER_PORT section=cluster_data file=/root/hpe-synergy-portworx-kubernetes/kubernetes_portworx/data/cluster_data.ini') }}"
    mgmt_NIC1_connection_id: "1"
    mgmt_NIC1_dhcp: "false"
    mgmt_NIC1_ipv4disable: "false"
    mgmt_NIC1_networkuri: "/rest/ethernet-networks/ce53067d-42c6-4603-aba7-f53df8c2f78c"
    mgmt_NIC1_constraint: "auto"
    mgmt_NIC2_connection_id: "2"
    mgmt_NIC2_dhcp: "true"
    mgmt_NIC2_ipv4disable: "false"
    mgmt_NIC2_networkuri: "/rest/ethernet-networks/ce53067d-42c6-4603-aba7-f53df8c2f78c"
    mgmt_NIC2_constraint: "dhcp"
    ntp_server: "10.60.1.123"
    root_password: "password"
    SSH: "Enabled"


  tasks:
    - name : "Create Server Profiles"
      delegate_to: localhost
      oneview_server_profile:
        config: "{{ config }}"
        state: "present"
        auto_assign_server_hardware: "true"
        data:
          name: "Kube-Node-{{ item }}"
          serialNumberType: Virtual
          iscsiInitiatorNameType: AutoGenerated
          macType: Virtual
          wwnType: Virtual
          description: 'create server profile'
          affinity: Bay
          connections:
          - id: 1
            name: MGMT1
            functionType: Ethernet
            portId: Auto
            requestedMbps: '2500'
            networkName: "{{ management_network }}"
            requestedVFs: '0'
            boot:
              priority: NotBootable
          - id: 2
            name: MGMT2
            functionType: Ethernet
            portId: Auto
            requestedMbps: '2500'
            networkName: "{{ management_network }}"
            requestedVFs: '0'
            boot:
              priority: NotBootable
          - id: 3
            name: Deployment_Network_A
            functionType: Ethernet
            portId: Mezz 3:1-a
            requestedMbps: '2500'
            networkName: "{{ deployment_network_name }}"
            requestedVFs: Auto
            ipv4:
              ipAddress: ''
            boot:
              priority: Primary
              ethernetBootType: iSCSI
              iscsi:
                initiatorNameSource: 'ProfileInitiatorName'
                firstBootTargetIp: ''
                secondBootTargetIp: ''
                secondBootTargetPort: ''
                initiatorName: ''
                bootTargetName: ''
                bootTargetLun: ''
          - id: 4
            name: Deployment_Network_B
            functionType: Ethernet
            portId: Mezz 3:2-a
            requestedMbps: '2500'
            networkName: "{{ deployment_network_name }}"
            requestedVFs: Auto
            ipv4:
              ipAddress: ''
            boot:
              priority: Secondary
              ethernetBootType: iSCSI
              iscsi:
                initiatorNameSource: 'ProfileInitiatorName'
                firstBootTargetIp: ''
                secondBootTargetIp: ''
                secondBootTargetPort: ''
                initiatorName: ''
                bootTargetName: ''
                bootTargetLun: ''
          osDeploymentSettings:
            osDeploymentPlanName: "{{ os_deployment_plan_name }}"
            forceOsDeployment: "true"
            osCustomAttributes:
              -  name: ClusterIP
                 value: "{{ cluster_ip }}"
              -  name: ClusterJoinToken
                 value: "{{ cluster_join_token }}"
              -  name: ClusterPort
                 value: "{{ cluster_port }}"
              -  name: Team0NIC1.connectionid
                 value: "1"
              -  name: Team0NIC1.dhcp
                 value: "{{ mgmt_NIC1_dhcp }}"
              -  name: Team0NIC1.ipv4disable
                 value: "{{ mgmt_NIC1_ipv4disable }}"
              -  name: Team0NIC1.networkuri
                 value: "{{ mgmt_NIC1_networkuri }}"
              -  name: Team0NIC1.constraint
                 value: "{{ mgmt_NIC1_constraint }}"
              -  name: Team0NIC2.connectionid
                 value: "2"
              -  name: Team0NIC2.dhcp
                 value: "{{ mgmt_NIC2_dhcp }}"
              -  name: Team0NIC2.ipv4disable
                 value: "{{ mgmt_NIC2_ipv4disable }}"
              -  name: Team0NIC2.networkuri
                 value: "{{ mgmt_NIC2_networkuri }}"
              -  name: Team0NIC2.constraint
                 value: "{{ mgmt_NIC2_constraint }}"
              -  name: NtpServer
                 value: "{{ ntp_server }}"
              -  name: ServerFQDN
                 value: "Kube-node{{ item }}.cloudra.local"
              -  name: SSH
                 value: "{{ SSH }}"
              -  name: NewRootPassword
                 value: "{{ root_password }}"
          boot:
            manageBoot: true
            order:
            - HardDisk
          bootMode:
             manageMode: true
             mode: UEFIOptimized
             pxeBootPolicy: Auto
          bios:
             manageBios: false
             overriddenSettings: []
          hideUnusedFlexNics: true
          iscsiInitiatorName: ''
          localStorage:
            sasLogicalJBODs: 
            - id: 1
              deviceSlot: "Mezz 1"
              name: "logical_drive1"
              numPhysicalDrives: 3
              driveMinSizeGB: 300
              driveMaxSizeGB: 300
              driveTechnology: "SasHdd"
              sasLogicalJBODUri: null  
            controllers: 
            - deviceSlot: "Mezz 1"
              mode: "Mixed"
              initialize: false
              importConfiguration: false
              logicalDrives:
              - name: null
                raidLevel: "RAID0"
                bootable: false
                numPhysicalDrives: null
                driveTechnology: null
                sasLogicalJBODId: 1
                driveNumber: null
      with_items:
      - [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
      when: item <= profile_numbers 
      register: result
    
    - copy: 
        dest: ./oscustom_attribute.json
        content: "{{ result }}"

    - name: get ip address
      delegate_to: localhost
      command: ./get_ip_address.py 
      register: response
    - debug: msg={{ response }}

#Powering ON the server
    - name: "Power On the server hardware"
      delegate_to: localhost
      oneview_server_hardware:
        config: "{{ config }}"
        state: power_state_set
        data:
            name : "{{ item }}"
            powerStateData:
                powerState: "On"
                powerControl: "MomentaryPress"
      with_items: 
      - "{{ response.stdout }}"

#wait for all nodes to come online and copy ssh-keysinclude wait_for module
- import_playbook: wait_for.yml
     
